// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResourceModalRedux test renders as expected 1 1`] = `undefined`;

exports[`ResourceModalRedux test renders as expected 1 2`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Connect(ResourceModal)
      data={
        Object {
          "__typename": "Application",
          "_uid": "local-cluster/42d4c013-52b9-11ea-bf05-00000a102d26",
          "clusterCount": 0,
          "created": "2019-12-11T01:24:02Z",
          "dashboard": null,
          "hubSubscriptions": Array [],
          "kind": "HCMApplication",
          "metadata": Object {
            "name": "samplebook-gbap",
            "namespace": "sample",
            "selfLink": "/apis/app.k8s.io/v1beta1/namespaces/sample/applications/samplebook-gbap",
          },
          "name": "samplebook-gbap",
          "namespace": "sample",
          "podStatusCount": Object {},
          "remoteSubscriptionStatusCount": Object {},
          "selfLink": "/apis/app.k8s.io/v1beta1/namespaces/sample/applications/samplebook-gbap",
        }
      }
      handleClose={[MockFunction]}
      handleSubmit={[MockFunction]}
      label={
        Object {
          "heading": "modal.edit-hcmapplication.heading",
          "label": "modal.edit-hcmapplication.label",
          "primaryBtn": "modal.edit-hcmapplication.heading",
        }
      }
      locale="en"
      open={true}
      resourceType={
        Object {
          "list": "HCMApplicationList",
          "name": "HCMApplication",
        }
      }
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <ResourceModal
        clearRequestStatus={[Function]}
        data={
          Object {
            "__typename": "Application",
            "_uid": "local-cluster/42d4c013-52b9-11ea-bf05-00000a102d26",
            "clusterCount": 0,
            "created": "2019-12-11T01:24:02Z",
            "dashboard": null,
            "hubSubscriptions": Array [],
            "kind": "HCMApplication",
            "metadata": Object {
              "name": "samplebook-gbap",
              "namespace": "sample",
              "selfLink": "/apis/app.k8s.io/v1beta1/namespaces/sample/applications/samplebook-gbap",
            },
            "name": "samplebook-gbap",
            "namespace": "sample",
            "podStatusCount": Object {},
            "remoteSubscriptionStatusCount": Object {},
            "selfLink": "/apis/app.k8s.io/v1beta1/namespaces/sample/applications/samplebook-gbap",
          }
        }
        handleClose={[Function]}
        handleSubmit={[MockFunction]}
        label={
          Object {
            "heading": "modal.edit-hcmapplication.heading",
            "label": "modal.edit-hcmapplication.label",
            "primaryBtn": "modal.edit-hcmapplication.heading",
          }
        }
        locale="en"
        open={true}
        putResource={[Function]}
        resourceType={
          Object {
            "list": "HCMApplicationList",
            "name": "HCMApplication",
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
        storeSubscription={
          Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
        }
      >
        <div
          id="resource-modal-container"
          role="region"
          tabIndex="-1"
        >
           
          <ComposedModal
            aria-label="Edit application"
            className="modal-with-editor"
            id="resource-modal-[object Object]"
            onClose={[Function]}
            onKeyDown={[Function]}
            open={true}
            role="region"
            selectorPrimaryFocus="[data-modal-primary-focus]"
          >
            <div
              aria-label="Edit application"
              className="bx--modal is-visible modal-with-editor"
              id="resource-modal-[object Object]"
              onBlur={[Function]}
              onClick={[Function]}
              onClose={[Function]}
              onKeyDown={[Function]}
              onTransitionEnd={[Function]}
              open={true}
              role="presentation"
              tabIndex={-1}
            >
              <div
                className="bx--modal-container"
              >
                <ModalHeader
                  buttonOnClick={[Function]}
                  closeModal={[Function]}
                  iconDescription="Close the modal"
                  key=".0"
                  title="Edit application"
                >
                  <div
                    className="bx--modal-header"
                  >
                    <p
                      className="bx--modal-header__heading bx--type-beta"
                    >
                      Edit application
                    </p>
                    <button
                      className="bx--modal-close"
                      onClick={[Function]}
                      type="button"
                    >
                      <Icon
                        className="bx--modal-close__icon"
                        description="Close the modal"
                        fillRule="evenodd"
                        icon={
                          Object {
                            "height": "10",
                            "id": "icon--close",
                            "name": "icon--close",
                            "styles": "",
                            "svgData": Object {
                              "circles": "",
                              "ellipses": "",
                              "paths": Array [
                                Object {
                                  "d": "M6.32 5L10 8.68 8.68 10 5 6.32 1.32 10 0 8.68 3.68 5 0 1.32 1.32 0 5 3.68 8.68 0 10 1.32 6.32 5z",
                                  "fill-rule": "nonzero",
                                },
                              ],
                              "polygons": "",
                              "polylines": "",
                              "rects": "",
                            },
                            "tags": "icon--close",
                            "viewBox": "0 0 10 10",
                            "width": "10",
                          }
                        }
                        role="img"
                      >
                        <svg
                          alt="Close the modal"
                          aria-label="Close the modal"
                          className="bx--modal-close__icon"
                          fillRule="evenodd"
                          height="10"
                          role="img"
                          viewBox="0 0 10 10"
                          width="10"
                        >
                          <title>
                            Close the modal
                          </title>
                          <path
                            d="M6.32 5L10 8.68 8.68 10 5 6.32 1.32 10 0 8.68 3.68 5 0 1.32 1.32 0 5 3.68 8.68 0 10 1.32 6.32 5z"
                            key="key0"
                          />
                        </svg>
                      </Icon>
                    </button>
                  </div>
                </ModalHeader>
                <ModalBody
                  key=".1"
                >
                  <div
                    className="bx--modal-content"
                  >
                    <div
                      className="yamlEditorContainerContainer"
                    >
                      <YamlEditor
                        onYamlChange={[Function]}
                        setEditor={[Function]}
                        yaml=""
                      >
                        <div
                          className="yamlEditorContainer"
                        >
                          <IsomorphicEditor
                            fontSize={12}
                            height="40vh"
                            key="loading"
                            language="yaml"
                            onChange={[Function]}
                            options={
                              Object {
                                "glyphMargin": true,
                                "readOnly": false,
                                "scrollBeyondLastLine": false,
                                "scrollbar": Object {
                                  "horizontalScrollbarSize": 17,
                                  "verticalScrollbarSize": 17,
                                },
                                "smoothScrolling": true,
                                "tabSize": 2,
                                "wordWrapMinified": false,
                              }
                            }
                            setEditor={[Function]}
                            theme="console"
                            value=""
                            width="49.5vw"
                          >
                            <MonacoEditor
                              defaultValue=""
                              editorDidMount={[Function]}
                              editorWillMount={[Function]}
                              fontSize={12}
                              height="40vh"
                              language="yaml"
                              onChange={[Function]}
                              options={
                                Object {
                                  "glyphMargin": true,
                                  "readOnly": false,
                                  "scrollBeyondLastLine": false,
                                  "scrollbar": Object {
                                    "horizontalScrollbarSize": 17,
                                    "verticalScrollbarSize": 17,
                                  },
                                  "smoothScrolling": true,
                                  "tabSize": 2,
                                  "wordWrapMinified": false,
                                }
                              }
                              overrideServices={Object {}}
                              setEditor={[Function]}
                              theme="console"
                              value=""
                              width="49.5vw"
                            >
                              <div
                                className="react-monaco-editor-container"
                                style={
                                  Object {
                                    "height": "40vh",
                                    "width": "49.5vw",
                                  }
                                }
                              />
                            </MonacoEditor>
                          </IsomorphicEditor>
                        </div>
                      </YamlEditor>
                    </div>
                  </div>
                </ModalBody>
                <ModalFooter
                  closeModal={[Function]}
                  inputref={
                    Object {
                      "current": <button
                        class="bx--btn bx--btn--primary"
                        inputref="[object Object]"
                        tabindex="0"
                        type="button"
                      >
                        Save
                      </button>,
                    }
                  }
                  key=".2"
                  onRequestClose={[Function]}
                  onRequestSubmit={[Function]}
                  primaryButtonText="Save"
                  secondaryButtonText="Cancel"
                >
                  <div
                    className="bx--modal-footer"
                    inputref={
                      Object {
                        "current": <button
                          class="bx--btn bx--btn--primary"
                          inputref="[object Object]"
                          tabindex="0"
                          type="button"
                        >
                          Save
                        </button>,
                      }
                    }
                  >
                    <Button
                      className=""
                      disabled={false}
                      iconDescription="Provide icon description if icon is used"
                      kind="secondary"
                      onClick={[Function]}
                      small={false}
                      tabIndex={0}
                      type="button"
                    >
                      <button
                        className="bx--btn bx--btn--secondary"
                        disabled={false}
                        onClick={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        Cancel
                      </button>
                    </Button>
                    <Button
                      className=""
                      disabled={false}
                      iconDescription="Provide icon description if icon is used"
                      inputref={
                        Object {
                          "current": <button
                            class="bx--btn bx--btn--primary"
                            inputref="[object Object]"
                            tabindex="0"
                            type="button"
                          >
                            Save
                          </button>,
                        }
                      }
                      kind="primary"
                      onClick={[Function]}
                      small={false}
                      tabIndex={0}
                      type="button"
                    >
                      <button
                        className="bx--btn bx--btn--primary"
                        disabled={false}
                        inputref={
                          Object {
                            "current": <button
                              class="bx--btn bx--btn--primary"
                              inputref="[object Object]"
                              tabindex="0"
                              type="button"
                            >
                              Save
                            </button>,
                          }
                        }
                        onClick={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        Save
                      </button>
                    </Button>
                  </div>
                </ModalFooter>
              </div>
            </div>
          </ComposedModal>
        </div>
      </ResourceModal>
    </Connect(ResourceModal)>
  </Router>
</BrowserRouter>
`;

exports[`ResourceModalRedux test renders as expected 1 3`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Connect(ResourceModal)
      data={
        Object {
          "__typename": "Application",
          "_uid": "local-cluster/42d4c013-52b9-11ea-bf05-00000a102d26",
          "clusterCount": 0,
          "created": "2019-12-11T01:24:02Z",
          "dashboard": null,
          "hubSubscriptions": Array [],
          "kind": "HCMApplication",
          "metadata": Object {
            "name": "samplebook-gbap",
            "namespace": "sample",
            "selfLink": "/apis/app.k8s.io/v1beta1/namespaces/sample/applications/samplebook-gbap",
          },
          "name": "samplebook-gbap",
          "namespace": "sample",
          "podStatusCount": Object {},
          "remoteSubscriptionStatusCount": Object {},
          "selfLink": "/apis/app.k8s.io/v1beta1/namespaces/sample/applications/samplebook-gbap",
        }
      }
      handleClose={[MockFunction]}
      handleSubmit={[MockFunction]}
      label={
        Object {
          "heading": "modal.edit-hcmapplication.heading",
          "label": "modal.edit-hcmapplication.label",
          "primaryBtn": "modal.edit-hcmapplication.heading",
        }
      }
      locale="en"
      open={true}
      resourceType={
        Object {
          "list": "HCMApplicationList",
          "name": "HCMApplication",
        }
      }
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <ResourceModal
        clearRequestStatus={[Function]}
        data={
          Object {
            "__typename": "Application",
            "_uid": "local-cluster/42d4c013-52b9-11ea-bf05-00000a102d26",
            "clusterCount": 0,
            "created": "2019-12-11T01:24:02Z",
            "dashboard": null,
            "hubSubscriptions": Array [],
            "kind": "HCMApplication",
            "metadata": Object {
              "name": "samplebook-gbap",
              "namespace": "sample",
              "selfLink": "/apis/app.k8s.io/v1beta1/namespaces/sample/applications/samplebook-gbap",
            },
            "name": "samplebook-gbap",
            "namespace": "sample",
            "podStatusCount": Object {},
            "remoteSubscriptionStatusCount": Object {},
            "selfLink": "/apis/app.k8s.io/v1beta1/namespaces/sample/applications/samplebook-gbap",
          }
        }
        handleClose={[Function]}
        handleSubmit={[MockFunction]}
        label={
          Object {
            "heading": "modal.edit-hcmapplication.heading",
            "label": "modal.edit-hcmapplication.label",
            "primaryBtn": "modal.edit-hcmapplication.heading",
          }
        }
        locale="en"
        open={true}
        putResource={[Function]}
        resourceType={
          Object {
            "list": "HCMApplicationList",
            "name": "HCMApplication",
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
        storeSubscription={
          Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
        }
      >
        <div
          id="resource-modal-container"
          role="region"
          tabIndex="-1"
        >
           
          <ComposedModal
            aria-label="Edit application"
            className="modal-with-editor"
            id="resource-modal-[object Object]"
            onClose={[Function]}
            onKeyDown={[Function]}
            open={true}
            role="region"
            selectorPrimaryFocus="[data-modal-primary-focus]"
          >
            <div
              aria-label="Edit application"
              className="bx--modal is-visible modal-with-editor"
              id="resource-modal-[object Object]"
              onBlur={[Function]}
              onClick={[Function]}
              onClose={[Function]}
              onKeyDown={[Function]}
              onTransitionEnd={[Function]}
              open={true}
              role="presentation"
              tabIndex={-1}
            >
              <div
                className="bx--modal-container"
              >
                <ModalHeader
                  buttonOnClick={[Function]}
                  closeModal={[Function]}
                  iconDescription="Close the modal"
                  key=".0"
                  title="Edit application"
                >
                  <div
                    className="bx--modal-header"
                  >
                    <p
                      className="bx--modal-header__heading bx--type-beta"
                    >
                      Edit application
                    </p>
                    <button
                      className="bx--modal-close"
                      onClick={[Function]}
                      type="button"
                    >
                      <Icon
                        className="bx--modal-close__icon"
                        description="Close the modal"
                        fillRule="evenodd"
                        icon={
                          Object {
                            "height": "10",
                            "id": "icon--close",
                            "name": "icon--close",
                            "styles": "",
                            "svgData": Object {
                              "circles": "",
                              "ellipses": "",
                              "paths": Array [
                                Object {
                                  "d": "M6.32 5L10 8.68 8.68 10 5 6.32 1.32 10 0 8.68 3.68 5 0 1.32 1.32 0 5 3.68 8.68 0 10 1.32 6.32 5z",
                                  "fill-rule": "nonzero",
                                },
                              ],
                              "polygons": "",
                              "polylines": "",
                              "rects": "",
                            },
                            "tags": "icon--close",
                            "viewBox": "0 0 10 10",
                            "width": "10",
                          }
                        }
                        role="img"
                      >
                        <svg
                          alt="Close the modal"
                          aria-label="Close the modal"
                          className="bx--modal-close__icon"
                          fillRule="evenodd"
                          height="10"
                          role="img"
                          viewBox="0 0 10 10"
                          width="10"
                        >
                          <title>
                            Close the modal
                          </title>
                          <path
                            d="M6.32 5L10 8.68 8.68 10 5 6.32 1.32 10 0 8.68 3.68 5 0 1.32 1.32 0 5 3.68 8.68 0 10 1.32 6.32 5z"
                            key="key0"
                          />
                        </svg>
                      </Icon>
                    </button>
                  </div>
                </ModalHeader>
                <ModalBody
                  key=".1"
                >
                  <div
                    className="bx--modal-content"
                  >
                    <div
                      className="yamlEditorContainerContainer"
                    >
                      <YamlEditor
                        onYamlChange={[Function]}
                        setEditor={[Function]}
                        yaml=""
                      >
                        <div
                          className="yamlEditorContainer"
                        >
                          <IsomorphicEditor
                            fontSize={12}
                            height="40vh"
                            key="loading"
                            language="yaml"
                            onChange={[Function]}
                            options={
                              Object {
                                "glyphMargin": true,
                                "readOnly": false,
                                "scrollBeyondLastLine": false,
                                "scrollbar": Object {
                                  "horizontalScrollbarSize": 17,
                                  "verticalScrollbarSize": 17,
                                },
                                "smoothScrolling": true,
                                "tabSize": 2,
                                "wordWrapMinified": false,
                              }
                            }
                            setEditor={[Function]}
                            theme="console"
                            value=""
                            width="49.5vw"
                          >
                            <MonacoEditor
                              defaultValue=""
                              editorDidMount={[Function]}
                              editorWillMount={[Function]}
                              fontSize={12}
                              height="40vh"
                              language="yaml"
                              onChange={[Function]}
                              options={
                                Object {
                                  "glyphMargin": true,
                                  "readOnly": false,
                                  "scrollBeyondLastLine": false,
                                  "scrollbar": Object {
                                    "horizontalScrollbarSize": 17,
                                    "verticalScrollbarSize": 17,
                                  },
                                  "smoothScrolling": true,
                                  "tabSize": 2,
                                  "wordWrapMinified": false,
                                }
                              }
                              overrideServices={Object {}}
                              setEditor={[Function]}
                              theme="console"
                              value=""
                              width="49.5vw"
                            >
                              <div
                                className="react-monaco-editor-container"
                                style={
                                  Object {
                                    "height": "40vh",
                                    "width": "49.5vw",
                                  }
                                }
                              />
                            </MonacoEditor>
                          </IsomorphicEditor>
                        </div>
                      </YamlEditor>
                    </div>
                  </div>
                </ModalBody>
                <ModalFooter
                  closeModal={[Function]}
                  inputref={
                    Object {
                      "current": <button
                        class="bx--btn bx--btn--primary"
                        inputref="[object Object]"
                        tabindex="0"
                        type="button"
                      >
                        Save
                      </button>,
                    }
                  }
                  key=".2"
                  onRequestClose={[Function]}
                  onRequestSubmit={[Function]}
                  primaryButtonText="Save"
                  secondaryButtonText="Cancel"
                >
                  <div
                    className="bx--modal-footer"
                    inputref={
                      Object {
                        "current": <button
                          class="bx--btn bx--btn--primary"
                          inputref="[object Object]"
                          tabindex="0"
                          type="button"
                        >
                          Save
                        </button>,
                      }
                    }
                  >
                    <Button
                      className=""
                      disabled={false}
                      iconDescription="Provide icon description if icon is used"
                      kind="secondary"
                      onClick={[Function]}
                      small={false}
                      tabIndex={0}
                      type="button"
                    >
                      <button
                        className="bx--btn bx--btn--secondary"
                        disabled={false}
                        onClick={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        Cancel
                      </button>
                    </Button>
                    <Button
                      className=""
                      disabled={false}
                      iconDescription="Provide icon description if icon is used"
                      inputref={
                        Object {
                          "current": <button
                            class="bx--btn bx--btn--primary"
                            inputref="[object Object]"
                            tabindex="0"
                            type="button"
                          >
                            Save
                          </button>,
                        }
                      }
                      kind="primary"
                      onClick={[Function]}
                      small={false}
                      tabIndex={0}
                      type="button"
                    >
                      <button
                        className="bx--btn bx--btn--primary"
                        disabled={false}
                        inputref={
                          Object {
                            "current": <button
                              class="bx--btn bx--btn--primary"
                              inputref="[object Object]"
                              tabindex="0"
                              type="button"
                            >
                              Save
                            </button>,
                          }
                        }
                        onClick={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        Save
                      </button>
                    </Button>
                  </div>
                </ModalFooter>
              </div>
            </div>
          </ComposedModal>
        </div>
      </ResourceModal>
    </Connect(ResourceModal)>
  </Router>
</BrowserRouter>
`;
