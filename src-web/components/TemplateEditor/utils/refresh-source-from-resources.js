/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2019. All Rights Reserved.
 *
 * Note to U.S. Government Users Restricted Rights:
 * Use, duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 * Copyright (c) 2020 Red Hat, Inc.
 *******************************************************************************/
'use strict'

import jsYaml from 'js-yaml'
import YamlParser from '../components/YamlParser'
import _ from 'lodash'

export const generateSourceFromResources = (editResources) => { //, controlData, otherYAMLTabs, isFinalGenerate) => {


  // use this to sort the keys generated by safeDump
  const sortKeys = (a, b) => {
    if (a === 'name' && b !== 'name') {
      return -1
    } else if (a !== 'name' && b === 'name') {
      return 1
    } else if (a === 'namespace' && b !== 'namespace') {
      return -1
    } else if (a !== 'namespace' && b === 'namespace') {
      return 1
    }
    return a.localeCompare(b)
  }

  let yaml,
      row = 0
  const parsed = []
  const yamls = []
  editResources.forEach(resource => {
    const key = _.get(resource, 'kind', 'unknown')
    yaml = jsYaml.safeDump(resource, { sortKeys, lineWidth: 200 })
    yaml = yaml.replaceAll(/'\d+':(\s|$)\s*/gm, '- ')
    const synced = new YamlParser().parse(yaml, row)
    synced.$r = row
    synced.$yml = yaml
    synced.$raw = resource
    let values = parsed[key]
    if (!values) {
      values = parsed[key] = []
    }
    values.push(synced)
    row += yaml.split('\n').length
    yamls.push(yaml)
  })

  return { templateYAML: yamls.join('---\n'), templateObject: parsed}
}
