/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2019. All Rights Reserved.
 *
 * Note to U.S. Government Users Restricted Rights:
 * Use, duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 * Copyright (c) 2020 Red Hat, Inc.
 *******************************************************************************/
'use strict'

import jsYaml from 'js-yaml'
import { discoverControls, editingMode, reverseTemplate } from './utils'
import { generateSourceFromTemplate } from './refresh-source-from-templates'
import YamlParser from '../components/YamlParser'
import _ from 'lodash'

export const generateSourceFromStack = (
  template,
  editStack,
  controlData,
  otherYAMLTabs,
  isFinalGenerate
) => {
  if (editStack.length === 1) {
    intializeEditStack(editStack, controlData)
  }
  //return generateSourceFromResources(resources)
  return generateSourceFromTemplate(
    template,
    controlData,
    otherYAMLTabs,
    isFinalGenerate
  )
}

const intializeEditStack = (editStack, controlData) => {
  const [{ editResources, forceUpdate, locale }] = editStack
  const source = generateSourceFromResources(editResources)
  const { templateObject } = source

  // determine the controls for this resource
  discoverControls(controlData, templateObject, forceUpdate, locale)
  // refresh the values from the template for these controls
  reverseTemplate(controlData, templateObject)

  // put controls into editing mode (ex: disable name input)
  editingMode(controlData)
  editStack.length = 0
  return editResources
}

const generateSourceFromResources = editResources => {
  // use this to sort the keys generated by safeDump
  const sortKeys = (a, b) => {
    if (a === 'name' && b !== 'name') {
      return -1
    } else if (a !== 'name' && b === 'name') {
      return 1
    } else if (a === 'namespace' && b !== 'namespace') {
      return -1
    } else if (a !== 'namespace' && b === 'namespace') {
      return 1
    }
    return a.localeCompare(b)
  }

  let yaml,
      row = 0
  const resources = []
  const parsed = {}
  const yamls = []
  editResources.forEach(resource => {
    if (!_.isEmpty(resource)) {
      const key = _.get(resource, 'kind', 'unknown')
      yaml = jsYaml.safeDump(resource, { sortKeys, lineWidth: 200 })
      yaml = yaml.replaceAll(/'\d+':(\s|$)\s*/gm, '- ')
      const $synced = new YamlParser().parse(yaml, row)
      $synced.$r = row
      $synced.$l = yaml.split(/[\r\n]+/g).length
      let values = parsed[key]
      if (!values) {
        values = parsed[key] = []
      }
      values.push({ $raw: resource, $yml: yaml, $synced })
      resources.push(resource)
      row += yaml.split('\n').length
      yamls.push(yaml)
    }
  })

  return {
    templateYAML: yamls.join('---\n'),
    templateObject: parsed,
    templateResources: resources
  }
}
