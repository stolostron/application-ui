"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var InlineCheckbox =
/*#__PURE__*/
function (_React$Component) {
  _inherits(InlineCheckbox, _React$Component);

  function InlineCheckbox() {
    var _ref;

    var _temp, _this;

    _classCallCheck(this, InlineCheckbox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = InlineCheckbox.__proto__ || Object.getPrototypeOf(InlineCheckbox)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), "handleRef", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(el) {
        _this.inputNode = el;
      }
    }), _temp));
  }

  _createClass(InlineCheckbox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.inputNode.indeterminate = this.props.indeterminate;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.indeterminate !== this.props.indeterminate) {
        this.inputNode.indeterminate = this.props.indeterminate;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          id = _props.id,
          indeterminate = _props.indeterminate,
          checked = _props.checked,
          ariaLabel = _props.ariaLabel,
          name = _props.name,
          onClick = _props.onClick,
          onKeyDown = _props.onKeyDown;
      var inputProps = {
        id: id,
        name: name,
        onClick: onClick,
        onKeyDown: onKeyDown,
        className: 'bx--checkbox',
        type: 'checkbox',
        ref: this.handleRef,
        checked: false
      };

      if (checked) {
        inputProps.checked = true;
      }

      if (indeterminate) {
        inputProps.checked = false;
        inputProps['aria-checked'] = 'mixed';
      }

      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("input", inputProps), _react.default.createElement("label", {
        htmlFor: id,
        className: "bx--checkbox-label",
        "aria-label": ariaLabel
      }));
    }
  }]);

  return InlineCheckbox;
}(_react.default.Component);

exports.default = InlineCheckbox;
Object.defineProperty(InlineCheckbox, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    /**
     * Specify the label for the control
     */
    ariaLabel: _propTypes.default.string.isRequired,

    /**
     * Specify whether the underlying control is checked, or not
     */
    checked: _propTypes.default.bool.isRequired,

    /**
     * Provide an `id` for the underlying input control
     */
    id: _propTypes.default.string.isRequired,

    /**
     * Specify whether the control is in an indterminate state
     */
    indeterminate: _propTypes.default.bool,

    /**
     * Provide a `name` for the underlying input control
     */
    name: _propTypes.default.string.isRequired,

    /**
     * Provide a handler that is invoked when a user clicks on the control
     */
    onClick: _propTypes.default.func,

    /**
     * Provide a handler that is invoked on the key down event for the control
     */
    onKeyDown: _propTypes.default.func
  }
});