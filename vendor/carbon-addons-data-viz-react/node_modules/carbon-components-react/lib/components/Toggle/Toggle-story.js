'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _react3 = require('@storybook/react');

var _addonActions = require('@storybook/addon-actions');

var _Toggle = require('../Toggle');

var _Toggle2 = _interopRequireDefault(_Toggle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toggleProps = {
  onToggle: (0, _addonActions.action)('toggle'),
  className: 'some-class'
};

(0, _react3.storiesOf)('Toggle', module).addWithInfo('Default', '\n      Toggles are controls that are used to quickly switch between two possible states. The example below shows\n      an uncontrolled Toggle component. To use the Toggle component as a controlled component, set the toggled property.\n      Setting the toggled property will allow you to change the value dynamically, whereas setting the defaultToggled\n      prop will only set the value initially.\n    ', function () {
  return _react2.default.createElement(_Toggle2.default, _extends({}, toggleProps, { className: 'some-class', id: 'toggle-1' }));
});