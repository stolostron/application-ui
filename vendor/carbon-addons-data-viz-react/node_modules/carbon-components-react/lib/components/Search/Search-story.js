'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable no-console */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _react3 = require('@storybook/react');

var _addonActions = require('@storybook/addon-actions');

var _Search = require('../Search');

var _Search2 = _interopRequireDefault(_Search);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var searchProps = {
  className: 'some-class'
};

(0, _react3.storiesOf)('Search', module).addWithInfo('normal', '\n      Search enables users to specify a word or a phrase to find particular relevant pieces of content\n      without the use of navigation. Search can be used as the primary means of discovering content,\n      or as a filter to aid the user in finding content.\n    ', function () {
  return _react2.default.createElement(_Search2.default, _extends({}, searchProps, {
    className: 'some-class',
    id: 'search-1',
    labelText: 'Search',
    placeHolderText: 'Search',
    onChange: function onChange() {
      console.log('onChange');
      (0, _addonActions.action)('onChange');
    }
  }));
}).addWithInfo('small', '\n      Search enables users to specify a word or a phrase to find particular relevant pieces of content\n      without the use of navigation. Search can be used as the primary means of discovering content,\n      or as a filter to aid the user in finding content. With the small property, the search field will be\n      more compact.\n    ', function () {
  return _react2.default.createElement(_Search2.default, _extends({}, searchProps, {
    className: 'some-class',
    small: true,
    id: 'search-2',
    labelText: 'Search',
    placeHolderText: 'Search',
    onChange: function onChange() {
      console.log('onChange');
      (0, _addonActions.action)('onChange');
    }
  }));
}).addWithInfo('Controlled', '\n      You can control the Search input like you would with a normal input as well. See the Storybook source to see the source code behind this at https://github.com/carbon-design-system/carbon-components-react/blob/master/.storybook/components/SearchStory.js\n    ', function () {
  var ControlledSearch = function (_React$Component) {
    _inherits(ControlledSearch, _React$Component);

    function ControlledSearch() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ControlledSearch);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ControlledSearch.__proto__ || Object.getPrototypeOf(ControlledSearch)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        searchValue: ''
      }, _this.handleChange = function (evt) {
        console.log('handleChange');
        _this.setState({ searchValue: evt.target.value });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ControlledSearch, [{
      key: 'render',
      value: function render() {
        return _react2.default.createElement(_Search2.default, _extends({}, searchProps, {
          className: 'some-class',
          id: 'search-1',
          labelText: 'Search',
          value: this.state.searchValue,
          onChange: this.handleChange,
          placeHolderText: 'Search'
        }));
      }
    }]);

    return ControlledSearch;
  }(_react2.default.Component);

  return _react2.default.createElement(ControlledSearch, null);
});