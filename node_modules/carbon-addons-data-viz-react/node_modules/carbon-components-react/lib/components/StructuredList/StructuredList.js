"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StructuredListCell = exports.StructuredListBody = exports.StructuredListRow = exports.StructuredListInput = exports.StructuredListHead = exports.StructuredListWrapper = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _uniqueId = _interopRequireDefault(require("../../tools/uniqueId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StructuredListWrapper =
/*#__PURE__*/
function (_Component) {
  _inherits(StructuredListWrapper, _Component);

  function StructuredListWrapper() {
    _classCallCheck(this, StructuredListWrapper);

    return _possibleConstructorReturn(this, (StructuredListWrapper.__proto__ || Object.getPrototypeOf(StructuredListWrapper)).apply(this, arguments));
  }

  _createClass(StructuredListWrapper, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          children = _props.children,
          selection = _props.selection,
          className = _props.className,
          border = _props.border,
          ariaLabel = _props.ariaLabel,
          other = _objectWithoutProperties(_props, ["children", "selection", "className", "border", "ariaLabel"]);

      var classes = (0, _classnames.default)('bx--structured-list', className, {
        'bx--structured-list--border': border,
        'bx--structured-list--selection': selection
      });
      return _react.default.createElement("section", _extends({
        className: classes
      }, other, {
        "aria-label": ariaLabel
      }), children);
    }
  }]);

  return StructuredListWrapper;
}(_react.Component);

exports.StructuredListWrapper = StructuredListWrapper;
Object.defineProperty(StructuredListWrapper, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    children: _propTypes.default.node,
    className: _propTypes.default.string,
    border: _propTypes.default.bool,
    selection: _propTypes.default.bool,
    ariaLabel: _propTypes.default.string
  }
});
Object.defineProperty(StructuredListWrapper, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    border: false,
    selection: false,
    ariaLabel: 'Structured list section'
  }
});

var StructuredListHead =
/*#__PURE__*/
function (_Component2) {
  _inherits(StructuredListHead, _Component2);

  function StructuredListHead() {
    _classCallCheck(this, StructuredListHead);

    return _possibleConstructorReturn(this, (StructuredListHead.__proto__ || Object.getPrototypeOf(StructuredListHead)).apply(this, arguments));
  }

  _createClass(StructuredListHead, [{
    key: "render",
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          className = _props2.className,
          other = _objectWithoutProperties(_props2, ["children", "className"]);

      var classes = (0, _classnames.default)('bx--structured-list-thead', className);
      return _react.default.createElement("div", _extends({
        className: classes
      }, other), children);
    }
  }]);

  return StructuredListHead;
}(_react.Component);

exports.StructuredListHead = StructuredListHead;
Object.defineProperty(StructuredListHead, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    children: _propTypes.default.node,
    className: _propTypes.default.string
  }
});

var StructuredListInput =
/*#__PURE__*/
function (_Component3) {
  _inherits(StructuredListInput, _Component3);

  function StructuredListInput() {
    _classCallCheck(this, StructuredListInput);

    return _possibleConstructorReturn(this, (StructuredListInput.__proto__ || Object.getPrototypeOf(StructuredListInput)).apply(this, arguments));
  }

  _createClass(StructuredListInput, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.uid = this.props.id || (0, _uniqueId.default)();
    }
  }, {
    key: "render",
    value: function render() {
      var _props3 = this.props,
          className = _props3.className,
          value = _props3.value,
          name = _props3.name,
          title = _props3.title,
          other = _objectWithoutProperties(_props3, ["className", "value", "name", "title"]);

      var classes = (0, _classnames.default)('bx--structured-list-input', className);
      return _react.default.createElement("input", _extends({}, other, {
        type: "radio",
        tabIndex: -1,
        id: this.uid,
        className: classes,
        value: value,
        name: name,
        title: title
      }));
    }
  }]);

  return StructuredListInput;
}(_react.Component);

exports.StructuredListInput = StructuredListInput;
Object.defineProperty(StructuredListInput, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    className: _propTypes.default.string,
    id: _propTypes.default.string,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    name: _propTypes.default.string,
    title: _propTypes.default.string,
    defaultChecked: _propTypes.default.bool,
    onChange: _propTypes.default.func
  }
});
Object.defineProperty(StructuredListInput, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    onChange: function onChange() {},
    value: 'value',
    title: 'title'
  }
});

var StructuredListRow =
/*#__PURE__*/
function (_Component4) {
  _inherits(StructuredListRow, _Component4);

  function StructuredListRow() {
    _classCallCheck(this, StructuredListRow);

    return _possibleConstructorReturn(this, (StructuredListRow.__proto__ || Object.getPrototypeOf(StructuredListRow)).apply(this, arguments));
  }

  _createClass(StructuredListRow, [{
    key: "render",
    value: function render() {
      var _props4 = this.props,
          onKeyDown = _props4.onKeyDown,
          tabIndex = _props4.tabIndex,
          children = _props4.children,
          className = _props4.className,
          head = _props4.head,
          label = _props4.label,
          other = _objectWithoutProperties(_props4, ["onKeyDown", "tabIndex", "children", "className", "head", "label"]);

      var classes = (0, _classnames.default)('bx--structured-list-row', className, {
        'bx--structured-list-row--header-row': head
      });
      return label ? _react.default.createElement("label", _extends({}, other, {
        tabIndex: tabIndex,
        className: classes,
        onKeyDown: onKeyDown,
        role: "presentation"
      }), children) : _react.default.createElement("div", _extends({}, other, {
        className: classes
      }), children);
    }
  }]);

  return StructuredListRow;
}(_react.Component);

exports.StructuredListRow = StructuredListRow;
Object.defineProperty(StructuredListRow, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    children: _propTypes.default.node,
    className: _propTypes.default.string,
    head: _propTypes.default.bool,
    label: _propTypes.default.bool,
    tabIndex: _propTypes.default.number,
    onKeyDown: _propTypes.default.func
  }
});
Object.defineProperty(StructuredListRow, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    head: false,
    label: false,
    tabIndex: 0,
    onKeyDown: function onKeyDown() {}
  }
});

var StructuredListBody =
/*#__PURE__*/
function (_Component5) {
  _inherits(StructuredListBody, _Component5);

  function StructuredListBody() {
    var _ref;

    var _temp, _this;

    _classCallCheck(this, StructuredListBody);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = StructuredListBody.__proto__ || Object.getPrototypeOf(StructuredListBody)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), "state", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: {
        labelRows: null,
        rowSelected: 0
      }
    }), _temp));
  }

  _createClass(StructuredListBody, [{
    key: "render",
    value: function render() {
      var _props5 = this.props,
          children = _props5.children,
          className = _props5.className,
          other = _objectWithoutProperties(_props5, ["children", "className"]);

      var classes = (0, _classnames.default)('bx--structured-list-tbody', className);
      return _react.default.createElement("div", _extends({
        className: classes
      }, other), children);
    }
  }]);

  return StructuredListBody;
}(_react.Component);

exports.StructuredListBody = StructuredListBody;
Object.defineProperty(StructuredListBody, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    children: _propTypes.default.node,
    className: _propTypes.default.string,
    head: _propTypes.default.bool,
    onKeyDown: _propTypes.default.func
  }
});
Object.defineProperty(StructuredListBody, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    onKeyDown: function onKeyDown() {}
  }
});

var StructuredListCell =
/*#__PURE__*/
function (_Component6) {
  _inherits(StructuredListCell, _Component6);

  function StructuredListCell() {
    _classCallCheck(this, StructuredListCell);

    return _possibleConstructorReturn(this, (StructuredListCell.__proto__ || Object.getPrototypeOf(StructuredListCell)).apply(this, arguments));
  }

  _createClass(StructuredListCell, [{
    key: "render",
    value: function render() {
      var _props6 = this.props,
          children = _props6.children,
          className = _props6.className,
          head = _props6.head,
          noWrap = _props6.noWrap,
          other = _objectWithoutProperties(_props6, ["children", "className", "head", "noWrap"]);

      var classes = (0, _classnames.default)(className, {
        'bx--structured-list-th': head,
        'bx--structured-list-td': !head,
        'bx--structured-list-content--nowrap': noWrap
      });
      return _react.default.createElement("div", _extends({
        className: classes
      }, other), children);
    }
  }]);

  return StructuredListCell;
}(_react.Component);

exports.StructuredListCell = StructuredListCell;
Object.defineProperty(StructuredListCell, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    children: _propTypes.default.node,
    className: _propTypes.default.string,
    head: _propTypes.default.bool,
    noWrap: _propTypes.default.bool
  }
});
Object.defineProperty(StructuredListCell, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    head: false,
    noWrap: false
  }
});