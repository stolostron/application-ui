"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _SearchFilterButton = _interopRequireDefault(require("../SearchFilterButton"));

var _SearchLayoutButton = _interopRequireDefault(require("../SearchLayoutButton"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var Search =
/*#__PURE__*/
function (_Component) {
  _inherits(Search, _Component);

  function Search() {
    var _ref;

    var _temp, _this;

    _classCallCheck(this, Search);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = Search.__proto__ || Object.getPrototypeOf(Search)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), "state", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: {
        hasContent: _this.props.value || _this.props.defaultValue || false
      }
    }), Object.defineProperty(_assertThisInitialized(_this), "clearInput", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(evt) {
        if (!_this.props.value) {
          _this.input.value = '';

          _this.props.onChange(evt);
        } else {
          var clearedEvt = Object.assign({}, evt.target, {
            target: {
              value: ''
            }
          });

          _this.props.onChange(clearedEvt);
        }

        _this.setState({
          hasContent: false
        }, function () {
          return _this.input.focus();
        });
      }
    }), Object.defineProperty(_assertThisInitialized(_this), "handleChange", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(evt) {
        _this.setState({
          hasContent: evt.target.value !== ''
        });

        _this.props.onChange(evt);
      }
    }), _temp));
  }

  _createClass(Search, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          type = _props.type,
          _props$id = _props.id,
          id = _props$id === void 0 ? this._inputId = this._inputId || "search__input__id_".concat(Math.random().toString(36).substr(2)) : _props$id,
          placeHolderText = _props.placeHolderText,
          labelText = _props.labelText,
          searchButtonLabelText = _props.searchButtonLabelText,
          layoutButtonLabelText = _props.layoutButtonLabelText,
          closeButtonLabelText = _props.closeButtonLabelText,
          small = _props.small,
          children = _props.children,
          other = _objectWithoutProperties(_props, ["className", "type", "id", "placeHolderText", "labelText", "searchButtonLabelText", "layoutButtonLabelText", "closeButtonLabelText", "small", "children"]);

      var hasContent = this.state.hasContent;
      var searchClasses = (0, _classnames.default)(_defineProperty({
        'bx--search bx--search-with-options': true,
        'bx--search--lg': !small,
        'bx--search--sm': small
      }, className, className));
      var clearClasses = (0, _classnames.default)({
        'bx--search-close': true,
        'bx--search-close--hidden': !hasContent
      });
      var renderButtons = !children && !small;
      return _react.default.createElement("div", {
        className: searchClasses,
        role: "search"
      }, _react.default.createElement(_Icon.default, {
        name: "search--glyph",
        description: labelText,
        className: "bx--search-magnifier"
      }), _react.default.createElement("label", {
        htmlFor: id,
        className: "bx--label"
      }, labelText), _react.default.createElement("input", _extends({}, other, {
        type: type,
        className: "bx--search-input",
        id: id,
        placeholder: placeHolderText,
        onChange: this.handleChange,
        ref: function ref(input) {
          _this2.input = input;
        }
      })), _react.default.createElement("button", {
        className: clearClasses,
        onClick: this.clearInput,
        type: "button",
        "aria-label": closeButtonLabelText
      }, _react.default.createElement(_Icon.default, {
        name: "close--glyph",
        description: closeButtonLabelText
      })), children, renderButtons && _react.default.createElement(_SearchFilterButton.default, {
        labelText: searchButtonLabelText
      }), renderButtons && _react.default.createElement(_SearchLayoutButton.default, {
        labelText: layoutButtonLabelText
      }));
    }
  }]);

  return Search;
}(_react.Component);

exports.default = Search;
Object.defineProperty(Search, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    children: _propTypes.default.node,
    className: _propTypes.default.string,
    type: _propTypes.default.string,
    small: _propTypes.default.bool,
    placeHolderText: _propTypes.default.string,
    labelText: _propTypes.default.node.isRequired,
    id: _propTypes.default.string,
    searchButtonLabelText: _propTypes.default.string,
    layoutButtonLabelText: _propTypes.default.string,
    closeButtonLabelText: _propTypes.default.string
  }
});
Object.defineProperty(Search, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    type: 'text',
    small: false,
    placeHolderText: '',
    onChange: function onChange() {}
  }
});