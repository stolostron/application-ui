// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditorBar components default 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EditorBar
    exceptions={Array []}
    gotoEditorLine={[MockFunction]}
    handleEditorCommand={[MockFunction]}
    handleSearchChange={[MockFunction]}
    hasRedo={false}
    hasUndo={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          aria-label="Search"
          className="editor-bar-search"
          id="Search"
          role="region"
        >
          <Search
            aria-label="Search"
            id="search-name"
            labelText=""
            light={false}
            onChange={[Function]}
            placeHolderText="Search"
            small={true}
            type="text"
          />
        </div>,
        Array [
          <EditorButton
            button={
              Object {
                "command": "previous",
                "disabled": true,
                "icon": "previous",
                "tooltip": "Previous",
              }
            }
            command="previous"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "next",
                "disabled": true,
                "icon": "next",
                "tooltip": "Next",
              }
            }
            command="next"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "spacer1",
                "spacer": true,
              }
            }
            command="spacer1"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "undo",
                "disabled": true,
                "icon": "undo",
                "tooltip": "Undo",
              }
            }
            command="undo"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "redo",
                "disabled": true,
                "icon": "redo",
                "tooltip": "Redo",
              }
            }
            command="redo"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "restore",
                "disabled": true,
                "icon": "restore",
                "tooltip": "Restore",
              }
            }
            command="restore"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "spacer2",
                "spacer": true,
              }
            }
            command="spacer2"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "update",
                "disabled": true,
                "icon": "deploy",
                "tooltip": "Update",
              }
            }
            command="update"
            handleClick={[Function]}
          />,
        ],
        false,
      ],
      "className": "editor-bar",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-label": "Search",
          "children": <Search
            aria-label="Search"
            id="search-name"
            labelText=""
            light={false}
            onChange={[Function]}
            placeHolderText="Search"
            small={true}
            type="text"
          />,
          "className": "editor-bar-search",
          "id": "Search",
          "role": "region",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "Search",
            "id": "search-name",
            "labelText": "",
            "light": false,
            "onChange": [Function],
            "placeHolderText": "Search",
            "small": true,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": "previous",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "previous",
            "disabled": true,
            "icon": "previous",
            "tooltip": "Previous",
          },
          "command": "previous",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "next",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "next",
            "disabled": true,
            "icon": "next",
            "tooltip": "Next",
          },
          "command": "next",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "spacer1",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "spacer1",
            "spacer": true,
          },
          "command": "spacer1",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "undo",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "undo",
            "disabled": true,
            "icon": "undo",
            "tooltip": "Undo",
          },
          "command": "undo",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "redo",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "redo",
            "disabled": true,
            "icon": "redo",
            "tooltip": "Redo",
          },
          "command": "redo",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "restore",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "restore",
            "disabled": true,
            "icon": "restore",
            "tooltip": "Restore",
          },
          "command": "restore",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "spacer2",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "spacer2",
            "spacer": true,
          },
          "command": "spacer2",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "update",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "update",
            "disabled": true,
            "icon": "deploy",
            "tooltip": "Update",
          },
          "command": "update",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            aria-label="Search"
            className="editor-bar-search"
            id="Search"
            role="region"
          >
            <Search
              aria-label="Search"
              id="search-name"
              labelText=""
              light={false}
              onChange={[Function]}
              placeHolderText="Search"
              small={true}
              type="text"
            />
          </div>,
          Array [
            <EditorButton
              button={
                Object {
                  "command": "previous",
                  "disabled": true,
                  "icon": "previous",
                  "tooltip": "Previous",
                }
              }
              command="previous"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "next",
                  "disabled": true,
                  "icon": "next",
                  "tooltip": "Next",
                }
              }
              command="next"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "spacer1",
                  "spacer": true,
                }
              }
              command="spacer1"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "undo",
                  "disabled": true,
                  "icon": "undo",
                  "tooltip": "Undo",
                }
              }
              command="undo"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "redo",
                  "disabled": true,
                  "icon": "redo",
                  "tooltip": "Redo",
                }
              }
              command="redo"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "restore",
                  "disabled": true,
                  "icon": "restore",
                  "tooltip": "Restore",
                }
              }
              command="restore"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "spacer2",
                  "spacer": true,
                }
              }
              command="spacer2"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "update",
                  "disabled": true,
                  "icon": "deploy",
                  "tooltip": "Update",
                }
              }
              command="update"
              handleClick={[Function]}
            />,
          ],
          false,
        ],
        "className": "editor-bar",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-label": "Search",
            "children": <Search
              aria-label="Search"
              id="search-name"
              labelText=""
              light={false}
              onChange={[Function]}
              placeHolderText="Search"
              small={true}
              type="text"
            />,
            "className": "editor-bar-search",
            "id": "Search",
            "role": "region",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "aria-label": "Search",
              "id": "search-name",
              "labelText": "",
              "light": false,
              "onChange": [Function],
              "placeHolderText": "Search",
              "small": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": "previous",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "previous",
              "disabled": true,
              "icon": "previous",
              "tooltip": "Previous",
            },
            "command": "previous",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "next",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "next",
              "disabled": true,
              "icon": "next",
              "tooltip": "Next",
            },
            "command": "next",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "spacer1",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "spacer1",
              "spacer": true,
            },
            "command": "spacer1",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "undo",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "undo",
              "disabled": true,
              "icon": "undo",
              "tooltip": "Undo",
            },
            "command": "undo",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "redo",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "redo",
              "disabled": true,
              "icon": "redo",
              "tooltip": "Redo",
            },
            "command": "redo",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "restore",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "restore",
              "disabled": true,
              "icon": "restore",
              "tooltip": "Restore",
            },
            "command": "restore",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "spacer2",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "spacer2",
              "spacer": true,
            },
            "command": "spacer2",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "update",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "update",
              "disabled": true,
              "icon": "deploy",
              "tooltip": "Update",
            },
            "command": "update",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`EditorBar components has exception 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EditorBar
    exceptions={
      Array [
        Object {
          "text": "testing with a very long message with 64 characters weeeeeeeeeeeee",
          "type": "error",
        },
      ]
    }
    gotoEditorLine={[MockFunction]}
    handleEditorCommand={[MockFunction]}
    handleSearchChange={[MockFunction]}
    hasRedo={true}
    hasUndo={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          aria-label="Search"
          className="editor-bar-search"
          id="Search"
          role="region"
        >
          <Search
            aria-label="Search"
            id="search-name"
            labelText=""
            light={false}
            onChange={[Function]}
            placeHolderText="Search"
            small={true}
            type="text"
          />
        </div>,
        Array [
          <EditorButton
            button={
              Object {
                "command": "previous",
                "disabled": true,
                "icon": "previous",
                "tooltip": "Previous",
              }
            }
            command="previous"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "next",
                "disabled": true,
                "icon": "next",
                "tooltip": "Next",
              }
            }
            command="next"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "spacer1",
                "spacer": true,
              }
            }
            command="spacer1"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "undo",
                "disabled": false,
                "icon": "undo",
                "tooltip": "Undo",
              }
            }
            command="undo"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "redo",
                "disabled": false,
                "icon": "redo",
                "tooltip": "Redo",
              }
            }
            command="redo"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "restore",
                "disabled": false,
                "icon": "restore",
                "tooltip": "Restore",
              }
            }
            command="restore"
            handleClick={[Function]}
          />,
          <EditorButton
            button={
              Object {
                "command": "spacer2",
                "spacer": true,
              }
            }
            command="spacer2"
            handleClick={[Function]}
          />,
        ],
        <OverflowMenu
          ariaLabel="list of options"
          direction="bottom"
          flipped={true}
          floatingMenu={true}
          iconDescription="open and close list of options"
          menuOffset={[Function]}
          menuOffsetFlip={[Function]}
          onClick={[Function]}
          onClose={[Function]}
          onKeyDown={[Function]}
          onOpen={[Function]}
          open={false}
          renderIcon={[Function]}
          tabIndex={0}
        >
          <OverflowMenuItem
            className="editor-error-button-item"
            disabled={false}
            hasDivider={false}
            isDelete={false}
            itemText={
              <div
                className="item-container"
              >
                <div
                  className="item-icon"
                >
                  <svg
                    height="12px"
                    width="12px"
                  >
                    <use
                      href="#diagramIcons_failure"
                    />
                  </svg>
                </div>
                <div>
                  testing with a very long message with 64 characters weeeeeeeeeee...
                </div>
              </div>
            }
            onClick={[Function]}
          />
        </OverflowMenu>,
      ],
      "className": "editor-bar",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-label": "Search",
          "children": <Search
            aria-label="Search"
            id="search-name"
            labelText=""
            light={false}
            onChange={[Function]}
            placeHolderText="Search"
            small={true}
            type="text"
          />,
          "className": "editor-bar-search",
          "id": "Search",
          "role": "region",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "Search",
            "id": "search-name",
            "labelText": "",
            "light": false,
            "onChange": [Function],
            "placeHolderText": "Search",
            "small": true,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": "previous",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "previous",
            "disabled": true,
            "icon": "previous",
            "tooltip": "Previous",
          },
          "command": "previous",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "next",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "next",
            "disabled": true,
            "icon": "next",
            "tooltip": "Next",
          },
          "command": "next",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "spacer1",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "spacer1",
            "spacer": true,
          },
          "command": "spacer1",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "undo",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "undo",
            "disabled": false,
            "icon": "undo",
            "tooltip": "Undo",
          },
          "command": "undo",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "redo",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "redo",
            "disabled": false,
            "icon": "redo",
            "tooltip": "Redo",
          },
          "command": "redo",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "restore",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "restore",
            "disabled": false,
            "icon": "restore",
            "tooltip": "Restore",
          },
          "command": "restore",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "spacer2",
        "nodeType": "class",
        "props": Object {
          "button": Object {
            "command": "spacer2",
            "spacer": true,
          },
          "command": "spacer2",
          "handleClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "ariaLabel": "list of options",
          "children": Array [
            <OverflowMenuItem
              className="editor-error-button-item"
              disabled={false}
              hasDivider={false}
              isDelete={false}
              itemText={
                <div
                  className="item-container"
                >
                  <div
                    className="item-icon"
                  >
                    <svg
                      height="12px"
                      width="12px"
                    >
                      <use
                        href="#diagramIcons_failure"
                      />
                    </svg>
                  </div>
                  <div>
                    testing with a very long message with 64 characters weeeeeeeeeee...
                  </div>
                </div>
              }
              onClick={[Function]}
            />,
          ],
          "direction": "bottom",
          "flipped": true,
          "floatingMenu": true,
          "iconDescription": "open and close list of options",
          "menuOffset": [Function],
          "menuOffsetFlip": [Function],
          "onClick": [Function],
          "onClose": [Function],
          "onKeyDown": [Function],
          "onOpen": [Function],
          "open": false,
          "renderIcon": [Function],
          "tabIndex": 0,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "testing with a very long message with 64 characters weeeeeeeeeee...",
            "nodeType": "function",
            "props": Object {
              "className": "editor-error-button-item",
              "disabled": false,
              "hasDivider": false,
              "isDelete": false,
              "itemText": <div
                className="item-container"
              >
                <div
                  className="item-icon"
                >
                  <svg
                    height="12px"
                    width="12px"
                  >
                    <use
                      href="#diagramIcons_failure"
                    />
                  </svg>
                </div>
                <div>
                  testing with a very long message with 64 characters weeeeeeeeeee...
                </div>
              </div>,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            aria-label="Search"
            className="editor-bar-search"
            id="Search"
            role="region"
          >
            <Search
              aria-label="Search"
              id="search-name"
              labelText=""
              light={false}
              onChange={[Function]}
              placeHolderText="Search"
              small={true}
              type="text"
            />
          </div>,
          Array [
            <EditorButton
              button={
                Object {
                  "command": "previous",
                  "disabled": true,
                  "icon": "previous",
                  "tooltip": "Previous",
                }
              }
              command="previous"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "next",
                  "disabled": true,
                  "icon": "next",
                  "tooltip": "Next",
                }
              }
              command="next"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "spacer1",
                  "spacer": true,
                }
              }
              command="spacer1"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "undo",
                  "disabled": false,
                  "icon": "undo",
                  "tooltip": "Undo",
                }
              }
              command="undo"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "redo",
                  "disabled": false,
                  "icon": "redo",
                  "tooltip": "Redo",
                }
              }
              command="redo"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "restore",
                  "disabled": false,
                  "icon": "restore",
                  "tooltip": "Restore",
                }
              }
              command="restore"
              handleClick={[Function]}
            />,
            <EditorButton
              button={
                Object {
                  "command": "spacer2",
                  "spacer": true,
                }
              }
              command="spacer2"
              handleClick={[Function]}
            />,
          ],
          <OverflowMenu
            ariaLabel="list of options"
            direction="bottom"
            flipped={true}
            floatingMenu={true}
            iconDescription="open and close list of options"
            menuOffset={[Function]}
            menuOffsetFlip={[Function]}
            onClick={[Function]}
            onClose={[Function]}
            onKeyDown={[Function]}
            onOpen={[Function]}
            open={false}
            renderIcon={[Function]}
            tabIndex={0}
          >
            <OverflowMenuItem
              className="editor-error-button-item"
              disabled={false}
              hasDivider={false}
              isDelete={false}
              itemText={
                <div
                  className="item-container"
                >
                  <div
                    className="item-icon"
                  >
                    <svg
                      height="12px"
                      width="12px"
                    >
                      <use
                        href="#diagramIcons_failure"
                      />
                    </svg>
                  </div>
                  <div>
                    testing with a very long message with 64 characters weeeeeeeeeee...
                  </div>
                </div>
              }
              onClick={[Function]}
            />
          </OverflowMenu>,
        ],
        "className": "editor-bar",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-label": "Search",
            "children": <Search
              aria-label="Search"
              id="search-name"
              labelText=""
              light={false}
              onChange={[Function]}
              placeHolderText="Search"
              small={true}
              type="text"
            />,
            "className": "editor-bar-search",
            "id": "Search",
            "role": "region",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "aria-label": "Search",
              "id": "search-name",
              "labelText": "",
              "light": false,
              "onChange": [Function],
              "placeHolderText": "Search",
              "small": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": "previous",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "previous",
              "disabled": true,
              "icon": "previous",
              "tooltip": "Previous",
            },
            "command": "previous",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "next",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "next",
              "disabled": true,
              "icon": "next",
              "tooltip": "Next",
            },
            "command": "next",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "spacer1",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "spacer1",
              "spacer": true,
            },
            "command": "spacer1",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "undo",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "undo",
              "disabled": false,
              "icon": "undo",
              "tooltip": "Undo",
            },
            "command": "undo",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "redo",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "redo",
              "disabled": false,
              "icon": "redo",
              "tooltip": "Redo",
            },
            "command": "redo",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "restore",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "restore",
              "disabled": false,
              "icon": "restore",
              "tooltip": "Restore",
            },
            "command": "restore",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "spacer2",
          "nodeType": "class",
          "props": Object {
            "button": Object {
              "command": "spacer2",
              "spacer": true,
            },
            "command": "spacer2",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "ariaLabel": "list of options",
            "children": Array [
              <OverflowMenuItem
                className="editor-error-button-item"
                disabled={false}
                hasDivider={false}
                isDelete={false}
                itemText={
                  <div
                    className="item-container"
                  >
                    <div
                      className="item-icon"
                    >
                      <svg
                        height="12px"
                        width="12px"
                      >
                        <use
                          href="#diagramIcons_failure"
                        />
                      </svg>
                    </div>
                    <div>
                      testing with a very long message with 64 characters weeeeeeeeeee...
                    </div>
                  </div>
                }
                onClick={[Function]}
              />,
            ],
            "direction": "bottom",
            "flipped": true,
            "floatingMenu": true,
            "iconDescription": "open and close list of options",
            "menuOffset": [Function],
            "menuOffsetFlip": [Function],
            "onClick": [Function],
            "onClose": [Function],
            "onKeyDown": [Function],
            "onOpen": [Function],
            "open": false,
            "renderIcon": [Function],
            "tabIndex": 0,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "testing with a very long message with 64 characters weeeeeeeeeee...",
              "nodeType": "function",
              "props": Object {
                "className": "editor-error-button-item",
                "disabled": false,
                "hasDivider": false,
                "isDelete": false,
                "itemText": <div
                  className="item-container"
                >
                  <div
                    className="item-icon"
                  >
                    <svg
                      height="12px"
                      width="12px"
                    >
                      <use
                        href="#diagramIcons_failure"
                      />
                    </svg>
                  </div>
                  <div>
                    testing with a very long message with 64 characters weeeeeeeeeee...
                  </div>
                </div>,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
